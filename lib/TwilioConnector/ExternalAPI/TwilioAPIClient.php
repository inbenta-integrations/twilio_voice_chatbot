<?php

namespace Inbenta\TwilioConnector\ExternalAPI;

use Inbenta\TwilioConnector\ExternalDigester\TwilioDigester;


class TwilioAPIClient
{
    public $from;
    public $to;

    /**
     * Build an external session Id using the following pattern:
     * 
     * @return String|null
     */
    public static function buildExternalIdFromRequest()
    {
        parse_str(file_get_contents('php://input'), $request);

        if (isset($request['AccountSid']) && isset($request['DialogueSid'])) {
            $response = 'twilio-' . $request['DialogueSid'];

            return $response;
        }
        return null;
    }


    /**
     * Establishes the Twilio sender (user) directly with the provided phone numbers
     * @param String $companyPhoneNumber
     * @param String $userPhoneNumber
     * @return void
     */
    public function setSenderFromId($companyPhoneNumber, $userPhoneNumber)
    {
        $this->from = '+' . $companyPhoneNumber;
        $this->to = '+' . $userPhoneNumber;
    }

    /**
     *   Generates the external id used by HyperChat to identify one user as external.
     *   This external id will be used by HyperChat adapter to instance this client class from the external id
     *   @return String external Id
     */
    public function getExternalId()
    {
        $response = str_replace(':+', '', 'twilio-' . $this->from . '-' . $this->to);
        $response = str_replace('+', '', $response);
        return $response;
    }

    /**
     *  Retrieves the Account SID from the external ID generated by the getExternalId method
     *  @param String $externalId
     *  @return String|null user phone number or null
     */
    public static function getUserNumberFromExternalId($externalId)
    {
        $externalIdExploded = explode('-', $externalId);
        if (array_shift($externalIdExploded) == 'twilio') {
            return $externalIdExploded[1];
        }
        return null;
    }

    /**
     *  Retrieves the company phone number from the external ID generated by the getExternalId method
     *  @param String $externalId
     *  @return String|null Company phone number or null
     */
    public static function getCompanyNumberFromExternalId($externalId)
    {
        $externalIdExploded = explode('-', $externalId);
        if (array_shift($externalIdExploded) == 'twilio') {
            return $externalIdExploded[0];
        }
        return null;
    }

    /**
     * Sends a message to Twilio. Needs a message formatted with the Twilio notation
     *
     * @param  string $message
     * @return array
     */
    public function sendMessage($message, $print = false)
    {
        $response = [
            "actions" => [
                [
                    "say" => TwilioDigester::removeInitialDots($message)
                ],
                [
                    "listen" => true
                ]
            ]
        ];

        if (!$print) {
            return $response;
        }

        header('Content-Type: application/json');
        echo json_encode($response, JSON_UNESCAPED_SLASHES);
        die;
    }


    /**
     *   Method needed
     */
    public function showBotTyping($show = true)
    {
        return true;
    }

    /**
     * Sends a message to Twilio. Needs a message formatted with the Twilio notation
     */
    public function sendTextMessage($text)
    {
        $message = $text;
        if (strpos($text, "<") !== false) { //If text has a type of html tags
            $digester = new TwilioDigester(null, null, null);
            $digester->handleMessageWithLinks($text);
            $message = $digester->cleanMessage($text);
        }
        $this->sendMessage($message, true);
    }
}
